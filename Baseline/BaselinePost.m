function [post,varargout]=BaselinePost(x,fid,verbose,div)

% Usage:
%   post=BaselinePost(x)
%   post=BaselinePost(x,fid)
%   post=BaselinePost(x,fid,verbose)
%   post=BaselinePost(x,fid,verbose,div)
%   [post,StateVartt,SIGtt,G1,G2,H,ObsVarBar]=BaselinePost(x)
%
% See also:
% MakeMats
%
% Created: 2014/3/17 

%% Initialize  some variables
StateVartt=[];SIGtt=[];G1=[];G2=[];H=[];ObsVarBar=[];

if nargout>1,varargout = {StateVartt,SIGtt,G1,G2,H,ObsVarBar};end

OpList = {};
if nargin>=2, OpList{1} = fid; end
if nargin>=3, OpList{2} = verbose; end
if nargin==4, OpList{3} = div; end
% Map parameters

omega = x(1);
xi = x(2);
eta = x(3);
zeta = x(4);
rho = x(5);
phipi = x(6);
phix = x(7);
pistar = x(8);
ra = x(9);
gammaa = x(10);
rhodelta = x(11);
rhogamma = x(12);
rhou = x(13);
sigmadelta = x(14);
sigmagamma = x(15);
sigmau = x(16);
sigmai = x(17);

% Evaluate priors

post = 0;
post = post + log(gampdf(omega,25.0000000000000000,0.0400000000000000));
post = post + log(gampdf(xi,4.0000000000000000,0.0250000000000000));
post = post + log(betapdf(eta,2.9999999999999991,1.9999999999999996));
post = post + log(betapdf(zeta,2.9999999999999991,1.9999999999999996));
post = post + log(betapdf(rho,5.8333333333333339,2.5000000000000004));
post = post + log(normpdf(phipi,1.5000000000000000,0.2500000000000000));
post = post + log(normpdf(phix,0.5000000000000000,0.2000000000000000));
post = post + log(normpdf(pistar,2.0000000000000000,1.0000000000000000));
post = post + log(normpdf(ra,2.0000000000000000,1.0000000000000000));
post = post + log(normpdf(gammaa,3.0000000000000000,0.3500000000000000));
post = post + log(betapdf(rhodelta,2.6249999999999996,2.6249999999999996));
post = post + log(betapdf(rhogamma,2.6249999999999996,2.6249999999999996));
post = post + log(betapdf(rhou,2.6249999999999996,2.6249999999999996));
post = post + log((sigmadelta>0)*(gampdf(sigmadelta^(-2),1.0197535401076772,11.9114911233910963)*2/sigmadelta^3));
post = post + log((sigmagamma>0)*(gampdf(sigmagamma^(-2),1.0197535401075808,11.9114911233941374)*2/sigmagamma^3));
post = post + log((sigmau>0)*(gampdf(sigmau^(-2),1.0197535401076099,11.9114911233932173)*2/sigmau^3));
post = post + log((sigmai>0)*(gampdf(sigmai^(-2),1.0197535401075837,11.9114911233940450)*2/sigmai^3));
if post==-inf, post = inf; return, end;


% Data

Data = [...
   3.4570599999999998, 3.9705300000000001, 6.8433299999999999;
   6.7828499999999998, 4.0418700000000003, 6.9166699999999999;
   2.0649199999999999, 4.1470700000000003, 6.6633300000000002;
   5.1056100000000004, 4.7765399999999998, 7.1566700000000001;
   2.0597699999999999, 4.5957299999999996, 7.9833299999999996;
   5.3052599999999996, 4.2328400000000004, 8.4700000000000006;
   3.7373300000000000, 4.6003299999999996, 9.4433299999999996;
   2.9811999999999999, 3.5034999999999998, 9.7266700000000004;
   3.1610299999999998, 2.7546200000000001, 9.0833300000000001;
   0.8719700000000000, 3.6699600000000001, 8.6133299999999995;
   4.1572100000000001, 4.8954899999999997, 8.2500000000000000;
   1.5863499999999999, 5.2389900000000003, 8.2433300000000003;
   -0.0049600000000000, 4.0593899999999996, 8.1600000000000001;
   -3.5193800000000000, 3.3805000000000001, 7.7433300000000003;
   -1.9423999999999999, 4.0653199999999998, 6.4266699999999997;
   2.6877399999999998, 3.3343500000000001, 5.8633300000000004;
   1.6806600000000000, 3.9648800000000000, 5.6433299999999997;
   1.5645899999999999, 3.4516600000000000, 4.8166700000000002;
   4.3681799999999997, 3.7735900000000000, 4.0233299999999996;
   4.2288199999999998, 2.9442200000000001, 3.7700000000000000;
   4.1077500000000002, 2.4489600000000000, 3.2566700000000002;
   4.1848200000000002, 2.5201699999999998, 3.0366700000000000;
   0.7359300000000000, 2.2073100000000001, 3.0400000000000000;
   2.5486399999999998, 2.5357099999999999, 3.0000000000000000;
   2.1013700000000002, 1.8377300000000001, 3.0600000000000001;
   5.2496000000000000, 1.8888400000000001, 2.9900000000000002;
   3.8730000000000002, 1.9835900000000000, 3.2133300000000000;
   5.4350100000000001, 2.5674800000000002, 3.9399999999999999;
   2.5687899999999999, 2.6874899999999999, 4.4866700000000002;
   4.4183100000000000, 2.0595599999999998, 5.1666699999999999;
   0.9806700000000000, 2.3284799999999999, 5.8099999999999996;
   0.8588800000000000, 2.3724699999999999, 6.0199999999999996;
   3.3470399999999998, 1.9631900000000000, 5.7966699999999998;
   2.7795800000000002, 1.9678199999999999, 5.7199999999999998;
   2.7301199999999999, 1.7080400000000000, 5.3633300000000004;
   6.8575699999999999, 1.8135900000000000, 5.2433300000000003;
   3.4631900000000000, 1.9691300000000000, 5.3066700000000004;
   4.3435400000000000, 2.3269799999999998, 5.2800000000000002;
   3.0614900000000000, 1.9157500000000001, 5.2766700000000002;
   5.8904899999999998, 2.1552400000000000, 5.5233299999999996;
   4.9883400000000000, 1.0204899999999999, 5.5333300000000003;
   3.0569400000000000, 1.4847100000000000, 5.5066699999999997;
   3.7589199999999998, 1.3515999999999999, 5.5199999999999996;
   3.5827000000000000, 1.4696899999999999, 5.5000000000000000;
   5.2429500000000004, 1.5367100000000000, 5.5333300000000003;
   6.8650799999999998, 1.4812500000000000, 4.8600000000000003;
   3.5473599999999998, 1.5431400000000000, 4.7333299999999996;
   3.1120399999999999, 1.3895800000000000, 4.7466699999999999;
   5.0558899999999998, 1.3446300000000000, 5.0933299999999999;
   7.1229600000000000, 1.6111599999999999, 5.3066700000000004;
   1.0409299999999999, 2.4443800000000002, 5.6766699999999997;
   7.7306600000000003, 1.2298100000000001, 6.2733299999999996;
   0.3338300000000000, 1.6295100000000000, 6.5199999999999996;
   2.3572799999999998, 1.9240100000000000, 6.4733299999999998;
   -1.3185100000000001, 2.4137499999999998, 5.5933299999999999;
   2.6150899999999999, 1.5363199999999999, 4.3266700000000000;
   -1.0990100000000000, 0.9017300000000000, 3.4966699999999999;
   1.4084399999999999, 2.0204200000000001, 2.1333299999999999;
   3.4228900000000002, 1.3655200000000001, 1.7333300000000000;
   2.1167300000000000, 2.3561899999999998, 1.7500000000000000;
   1.9917700000000000, 2.0635500000000002, 1.7400000000000000;
   0.0827800000000000, 1.4007000000000001, 1.4433300000000000;
   1.6175800000000000, 0.9590900000000000, 1.2500000000000000;
   3.1781899999999998, 1.5306200000000001, 1.2466699999999999;
   6.6504300000000001, 1.7373700000000001, 1.0166700000000000;
   3.5799300000000001, 1.6385600000000000, 0.9966699999999999;
   2.8067500000000001, 2.3917000000000002, 1.0033300000000001;
   2.8330500000000001, 2.6111800000000001, 1.0133300000000001;
   2.9269300000000000, 1.9870200000000000, 1.4399999999999999;
   3.4571999999999998, 1.8270200000000001, 1.9466699999999999;
   3.9704600000000001, 2.8398800000000000, 2.4733299999999998;
   1.7005300000000001, 2.1668699999999999, 2.9399999999999999;
   3.0296099999999999, 1.6164900000000000, 3.4600000000000000;
   2.0604100000000001, 2.6228600000000002, 3.9733299999999998;
   5.2119200000000001, 1.9549300000000001, 4.4566699999999999;
   1.4405900000000000, 2.8793199999999999, 4.9000000000000004;
   0.1049000000000000, 2.2395200000000002, 5.2500000000000000;
   2.9139499999999998, 2.0370900000000001, 5.2466699999999999;
   1.1987500000000000, 2.7360300000000000, 5.2566699999999997;
   3.1660900000000001, 1.7523299999999999, 5.2500000000000000;
   3.5317699999999999, 2.2406899999999998, 5.0733300000000003;
   2.0994100000000002, 3.0766800000000001, 4.4966699999999999;
   -0.7265100000000000, 2.3353400000000000, 3.1766700000000001;
   1.4457400000000000, 2.4115300000000000, 2.0866699999999998;
   -2.7135600000000002, 2.5197200000000000, 1.9399999999999999;
   -5.5225400000000002, 0.7943700000000000, 0.5066700000000000;
   -6.6444900000000002, 1.1368300000000000, 0.1833300000000000;
   -0.7403100000000000, 1.9881500000000001, 0.1800000000000000;
   2.7437399999999998, 1.3040799999999999, 0.1566700000000000;
  ];

%% Get Mats
Mats=BaselineMats(x,2,1,OpList{:});
if ~all(Mats.REE.eu==1)||Mats.KF.sig00rc~=0,post = inf;return,end

%% Kalman Filter

stt = Mats.KF.s00;
sigtt = Mats.KF.sig00;
StateVartt = zeros(14,89);
SIGtt = zeros(14,14,89);
for t=1:89;
  idxNoNaN = ~isnan(Data(t,:));
  [stt,sigtt,lh,ObsVarhat]=kf(Data(t,idxNoNaN)'-Mats.KF.ObsVarBar(idxNoNaN),...
    Mats.ObsEq.H(idxNoNaN,:),stt,sigtt,Mats.REE.G1,Mats.REE.G2);
  if t>0
    post=post+lh*[1;1];
  end
  StateVartt(:,t) = stt;
  SIGtt(:,:,t) = sigtt;
end

% Add normalization
post = -( post - 267/2*log(2*pi) );

%% Provide additional optional output
if nargout>1
  varargout = {StateVartt,SIGtt,Mats};
end

